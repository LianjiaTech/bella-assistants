/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.ResponseIdMappingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResponseIdMapping extends TableImpl<ResponseIdMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>response_id_mapping</code>
     */
    public static final ResponseIdMapping RESPONSE_ID_MAPPING = new ResponseIdMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResponseIdMappingRecord> getRecordType() {
        return ResponseIdMappingRecord.class;
    }

    /**
     * The column <code>response_id_mapping.response_id</code>. Response唯一标识符
     */
    public final TableField<ResponseIdMappingRecord, String> RESPONSE_ID = createField(DSL.name("response_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "Response唯一标识符");

    /**
     * The column <code>response_id_mapping.thread_id</code>. 会话id
     */
    public final TableField<ResponseIdMappingRecord, String> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "会话id");

    /**
     * The column <code>response_id_mapping.run_id</code>. run_id
     */
    public final TableField<ResponseIdMappingRecord, String> RUN_ID = createField(DSL.name("run_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "run_id");

    /**
     * The column <code>response_id_mapping.previous_response_id</code>. 上次请求的responseid
     */
    public final TableField<ResponseIdMappingRecord, String> PREVIOUS_RESPONSE_ID = createField(DSL.name("previous_response_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "上次请求的responseid");

    /**
     * The column <code>response_id_mapping.user</code>. 用户id
     */
    public final TableField<ResponseIdMappingRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("0", SQLDataType.VARCHAR)), this, "用户id");

    /**
     * The column <code>response_id_mapping.status</code>. 状态：active 正常的 deleted 已删除
     */
    public final TableField<ResponseIdMappingRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("active", SQLDataType.VARCHAR)), this, "状态：active 正常的 deleted 已删除");

    /**
     * The column <code>response_id_mapping.created_at</code>. 创建时间
     */
    public final TableField<ResponseIdMappingRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>response_id_mapping.updated_at</code>. 更新时间
     */
    public final TableField<ResponseIdMappingRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    private ResponseIdMapping(Name alias, Table<ResponseIdMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResponseIdMapping(Name alias, Table<ResponseIdMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>response_id_mapping</code> table reference
     */
    public ResponseIdMapping(String alias) {
        this(DSL.name(alias), RESPONSE_ID_MAPPING);
    }

    /**
     * Create an aliased <code>response_id_mapping</code> table reference
     */
    public ResponseIdMapping(Name alias) {
        this(alias, RESPONSE_ID_MAPPING);
    }

    /**
     * Create a <code>response_id_mapping</code> table reference
     */
    public ResponseIdMapping() {
        this(DSL.name("response_id_mapping"), null);
    }

    public <O extends Record> ResponseIdMapping(Table<O> child, ForeignKey<O, ResponseIdMappingRecord> key) {
        super(child, key, RESPONSE_ID_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ResponseIdMappingRecord> getPrimaryKey() {
        return Keys.KEY_RESPONSE_ID_MAPPING_PRIMARY;
    }

    @Override
    public List<UniqueKey<ResponseIdMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<ResponseIdMappingRecord>>asList(Keys.KEY_RESPONSE_ID_MAPPING_PRIMARY);
    }

    @Override
    public ResponseIdMapping as(String alias) {
        return new ResponseIdMapping(DSL.name(alias), this);
    }

    @Override
    public ResponseIdMapping as(Name alias) {
        return new ResponseIdMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResponseIdMapping rename(String name) {
        return new ResponseIdMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResponseIdMapping rename(Name name) {
        return new ResponseIdMapping(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
