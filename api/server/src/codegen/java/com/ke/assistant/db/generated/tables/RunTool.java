/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.RunToolRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunTool extends TableImpl<RunToolRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>run_tool</code>
     */
    public static final RunTool RUN_TOOL = new RunTool();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunToolRecord> getRecordType() {
        return RunToolRecord.class;
    }

    /**
     * The column <code>run_tool.id</code>.
     */
    public final TableField<RunToolRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>run_tool.run_id</code>.
     */
    public final TableField<RunToolRecord, String> RUN_ID = createField(DSL.name("run_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_tool.tool</code>.
     */
    public final TableField<RunToolRecord, String> TOOL = createField(DSL.name("tool"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>run_tool.created_at</code>.
     */
    public final TableField<RunToolRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run_tool.updated_at</code>.
     */
    public final TableField<RunToolRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private RunTool(Name alias, Table<RunToolRecord> aliased) {
        this(alias, aliased, null);
    }

    private RunTool(Name alias, Table<RunToolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>run_tool</code> table reference
     */
    public RunTool(String alias) {
        this(DSL.name(alias), RUN_TOOL);
    }

    /**
     * Create an aliased <code>run_tool</code> table reference
     */
    public RunTool(Name alias) {
        this(alias, RUN_TOOL);
    }

    /**
     * Create a <code>run_tool</code> table reference
     */
    public RunTool() {
        this(DSL.name("run_tool"), null);
    }

    public <O extends Record> RunTool(Table<O> child, ForeignKey<O, RunToolRecord> key) {
        super(child, key, RUN_TOOL);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RUN_TOOL_INDEX_RUN_ID);
    }

    @Override
    public Identity<RunToolRecord, Integer> getIdentity() {
        return (Identity<RunToolRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RunToolRecord> getPrimaryKey() {
        return Keys.KEY_RUN_TOOL_PRIMARY;
    }

    @Override
    public List<UniqueKey<RunToolRecord>> getKeys() {
        return Arrays.<UniqueKey<RunToolRecord>>asList(Keys.KEY_RUN_TOOL_PRIMARY);
    }

    @Override
    public RunTool as(String alias) {
        return new RunTool(DSL.name(alias), this);
    }

    @Override
    public RunTool as(Name alias) {
        return new RunTool(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RunTool rename(String name) {
        return new RunTool(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RunTool rename(Name name) {
        return new RunTool(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
