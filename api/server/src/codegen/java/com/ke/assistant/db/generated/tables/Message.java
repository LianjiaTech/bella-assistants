/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.MessageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>message.id</code>.
     */
    public final TableField<MessageRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.role</code>.
     */
    public final TableField<MessageRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.thread_id</code>.
     */
    public final TableField<MessageRecord, String> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.object</code>.
     */
    public final TableField<MessageRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.status</code>.
     */
    public final TableField<MessageRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("in_progress", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.content</code>.
     */
    public final TableField<MessageRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>message.reasoning_content</code>.
     */
    public final TableField<MessageRecord, String> REASONING_CONTENT = createField(DSL.name("reasoning_content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>message.attachments</code>. 本轮消息可用的额外的文件和工具
     */
    public final TableField<MessageRecord, String> ATTACHMENTS = createField(DSL.name("attachments"), SQLDataType.VARCHAR(4096).defaultValue(DSL.inline("[]", SQLDataType.VARCHAR)), this, "本轮消息可用的额外的文件和工具");

    /**
     * The column <code>message.file_ids</code>.
     */
    public final TableField<MessageRecord, String> FILE_IDS = createField(DSL.name("file_ids"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.metadata</code>.
     */
    public final TableField<MessageRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.assistant_id</code>.
     */
    public final TableField<MessageRecord, String> ASSISTANT_ID = createField(DSL.name("assistant_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.run_id</code>.
     */
    public final TableField<MessageRecord, String> RUN_ID = createField(DSL.name("run_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>message.name</code>. 名称
     */
    public final TableField<MessageRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "名称");

    /**
     * The column <code>message.message_type</code>. 消息的类型
     */
    public final TableField<MessageRecord, String> MESSAGE_TYPE = createField(DSL.name("message_type"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("mixed", SQLDataType.VARCHAR)), this, "消息的类型");

    /**
     * The column <code>message.summarized_by</code>. 如果消息被压缩，此处标记压缩消息的message_id
     */
    public final TableField<MessageRecord, String> SUMMARIZED_BY = createField(DSL.name("summarized_by"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "如果消息被压缩，此处标记压缩消息的message_id");

    /**
     * The column <code>message.message_status</code>. 消息状态
     */
    public final TableField<MessageRecord, String> MESSAGE_STATUS = createField(DSL.name("message_status"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("original", SQLDataType.VARCHAR)), this, "消息状态");

    /**
     * The column <code>message.created_at</code>.
     */
    public final TableField<MessageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>message.updated_at</code>.
     */
    public final TableField<MessageRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    /**
     * Create a <code>message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    public <O extends Record> Message(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_IDX_CREATED_AT, Indexes.MESSAGE_IDX_MSG_ASSISTANT_ID, Indexes.MESSAGE_IDX_MSG_RUN_ID, Indexes.MESSAGE_IDX_MSG_THREAD_ID);
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(Keys.KEY_MESSAGE_PRIMARY);
    }

    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
