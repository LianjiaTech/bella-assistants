/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.AssistantRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * assistant基础信息表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Assistant extends TableImpl<AssistantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>assistant</code>
     */
    public static final Assistant ASSISTANT = new Assistant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssistantRecord> getRecordType() {
        return AssistantRecord.class;
    }

    /**
     * The column <code>assistant.id</code>.
     */
    public final TableField<AssistantRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>assistant.model</code>. assistant使用模型
     */
    public final TableField<AssistantRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "assistant使用模型");

    /**
     * The column <code>assistant.object</code>.
     */
    public final TableField<AssistantRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>assistant.name</code>. assistant名称
     */
    public final TableField<AssistantRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "assistant名称");

    /**
     * The column <code>assistant.description</code>. assistant描述
     */
    public final TableField<AssistantRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "assistant描述");

    /**
     * The column <code>assistant.instructions</code>.
     */
    public final TableField<AssistantRecord, String> INSTRUCTIONS = createField(DSL.name("instructions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>assistant.temperature</code>. temperature of the run
     */
    public final TableField<AssistantRecord, Double> TEMPERATURE = createField(DSL.name("temperature"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.inline("0.01", SQLDataType.FLOAT)), this, "temperature of the run");

    /**
     * The column <code>assistant.top_p</code>. top_p of the run
     */
    public final TableField<AssistantRecord, Double> TOP_P = createField(DSL.name("top_p"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.FLOAT)), this, "top_p of the run");

    /**
     * The column <code>assistant.response_format</code>. 输出格式
     */
    public final TableField<AssistantRecord, String> RESPONSE_FORMAT = createField(DSL.name("response_format"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("auto", SQLDataType.VARCHAR)), this, "输出格式");

    /**
     * The column <code>assistant.user</code>. user
     */
    public final TableField<AssistantRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(50).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "user");

    /**
     * The column <code>assistant.reasoning_effort</code>. 推理参数配置
     */
    public final TableField<AssistantRecord, String> REASONING_EFFORT = createField(DSL.name("reasoning_effort"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "推理参数配置");

    /**
     * The column <code>assistant.profile</code>.
     */
    public final TableField<AssistantRecord, Byte> PROFILE = createField(DSL.name("profile"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>assistant.owner</code>. 创建人
     */
    public final TableField<AssistantRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "创建人");

    /**
     * The column <code>assistant.metadata</code>. 元信息
     */
    public final TableField<AssistantRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "元信息");

    /**
     * The column <code>assistant.created_at</code>.
     */
    public final TableField<AssistantRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>assistant.updated_at</code>.
     */
    public final TableField<AssistantRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Assistant(Name alias, Table<AssistantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Assistant(Name alias, Table<AssistantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("assistant基础信息表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>assistant</code> table reference
     */
    public Assistant(String alias) {
        this(DSL.name(alias), ASSISTANT);
    }

    /**
     * Create an aliased <code>assistant</code> table reference
     */
    public Assistant(Name alias) {
        this(alias, ASSISTANT);
    }

    /**
     * Create a <code>assistant</code> table reference
     */
    public Assistant() {
        this(DSL.name("assistant"), null);
    }

    public <O extends Record> Assistant(Table<O> child, ForeignKey<O, AssistantRecord> key) {
        super(child, key, ASSISTANT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSISTANT_INDEX_ASSISTANT_OWNER);
    }

    @Override
    public UniqueKey<AssistantRecord> getPrimaryKey() {
        return Keys.KEY_ASSISTANT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AssistantRecord>> getKeys() {
        return Arrays.<UniqueKey<AssistantRecord>>asList(Keys.KEY_ASSISTANT_PRIMARY);
    }

    @Override
    public Assistant as(String alias) {
        return new Assistant(DSL.name(alias), this);
    }

    @Override
    public Assistant as(Name alias) {
        return new Assistant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Assistant rename(String name) {
        return new Assistant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Assistant rename(Name name) {
        return new Assistant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, Double, Double, String, String, String, Byte, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
