/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.AssistantFileRelationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssistantFileRelation extends TableImpl<AssistantFileRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>assistant_file_relation</code>
     */
    public static final AssistantFileRelation ASSISTANT_FILE_RELATION = new AssistantFileRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssistantFileRelationRecord> getRecordType() {
        return AssistantFileRelationRecord.class;
    }

    /**
     * The column <code>assistant_file_relation.id</code>.
     */
    public final TableField<AssistantFileRelationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>assistant_file_relation.file_id</code>.
     */
    public final TableField<AssistantFileRelationRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>assistant_file_relation.assistant_id</code>.
     */
    public final TableField<AssistantFileRelationRecord, String> ASSISTANT_ID = createField(DSL.name("assistant_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>assistant_file_relation.object</code>.
     */
    public final TableField<AssistantFileRelationRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>assistant_file_relation.tool_name</code>. 工具名称
     */
    public final TableField<AssistantFileRelationRecord, String> TOOL_NAME = createField(DSL.name("tool_name"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "工具名称");

    /**
     * The column <code>assistant_file_relation.created_at</code>.
     */
    public final TableField<AssistantFileRelationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>assistant_file_relation.updated_at</code>.
     */
    public final TableField<AssistantFileRelationRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AssistantFileRelation(Name alias, Table<AssistantFileRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssistantFileRelation(Name alias, Table<AssistantFileRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>assistant_file_relation</code> table reference
     */
    public AssistantFileRelation(String alias) {
        this(DSL.name(alias), ASSISTANT_FILE_RELATION);
    }

    /**
     * Create an aliased <code>assistant_file_relation</code> table reference
     */
    public AssistantFileRelation(Name alias) {
        this(alias, ASSISTANT_FILE_RELATION);
    }

    /**
     * Create a <code>assistant_file_relation</code> table reference
     */
    public AssistantFileRelation() {
        this(DSL.name("assistant_file_relation"), null);
    }

    public <O extends Record> AssistantFileRelation(Table<O> child, ForeignKey<O, AssistantFileRelationRecord> key) {
        super(child, key, ASSISTANT_FILE_RELATION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSISTANT_FILE_RELATION_INDEX_ASSISTANT_ID, Indexes.ASSISTANT_FILE_RELATION_INDEX_FILE_ID, Indexes.ASSISTANT_FILE_RELATION_INDEX_TOOL_NAME);
    }

    @Override
    public Identity<AssistantFileRelationRecord, Integer> getIdentity() {
        return (Identity<AssistantFileRelationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AssistantFileRelationRecord> getPrimaryKey() {
        return Keys.KEY_ASSISTANT_FILE_RELATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<AssistantFileRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<AssistantFileRelationRecord>>asList(Keys.KEY_ASSISTANT_FILE_RELATION_PRIMARY, Keys.KEY_ASSISTANT_FILE_RELATION_UNIQUE_INDEX_NAME);
    }

    @Override
    public AssistantFileRelation as(String alias) {
        return new AssistantFileRelation(DSL.name(alias), this);
    }

    @Override
    public AssistantFileRelation as(Name alias) {
        return new AssistantFileRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssistantFileRelation rename(String name) {
        return new AssistantFileRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssistantFileRelation rename(Name name) {
        return new AssistantFileRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
