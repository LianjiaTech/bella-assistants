/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.ThreadRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Thread extends TableImpl<ThreadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>thread</code>
     */
    public static final Thread THREAD = new Thread();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThreadRecord> getRecordType() {
        return ThreadRecord.class;
    }

    /**
     * The column <code>thread.id</code>.
     */
    public final TableField<ThreadRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>thread.object</code>.
     */
    public final TableField<ThreadRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>thread.owner</code>.
     */
    public final TableField<ThreadRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>thread.user</code>.
     */
    public final TableField<ThreadRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>thread.environment</code>. 环境信息
     */
    public final TableField<ThreadRecord, String> ENVIRONMENT = createField(DSL.name("environment"), SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.inline("{}", SQLDataType.VARCHAR)), this, "环境信息");

    /**
     * The column <code>thread.metadata</code>.
     */
    public final TableField<ThreadRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>thread.created_at</code>.
     */
    public final TableField<ThreadRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>thread.updated_at</code>.
     */
    public final TableField<ThreadRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Thread(Name alias, Table<ThreadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Thread(Name alias, Table<ThreadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>thread</code> table reference
     */
    public Thread(String alias) {
        this(DSL.name(alias), THREAD);
    }

    /**
     * Create an aliased <code>thread</code> table reference
     */
    public Thread(Name alias) {
        this(alias, THREAD);
    }

    /**
     * Create a <code>thread</code> table reference
     */
    public Thread() {
        this(DSL.name("thread"), null);
    }

    public <O extends Record> Thread(Table<O> child, ForeignKey<O, ThreadRecord> key) {
        super(child, key, THREAD);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.THREAD_INDEX_THREAD_OWNER);
    }

    @Override
    public UniqueKey<ThreadRecord> getPrimaryKey() {
        return Keys.KEY_THREAD_PRIMARY;
    }

    @Override
    public List<UniqueKey<ThreadRecord>> getKeys() {
        return Arrays.<UniqueKey<ThreadRecord>>asList(Keys.KEY_THREAD_PRIMARY);
    }

    @Override
    public Thread as(String alias) {
        return new Thread(DSL.name(alias), this);
    }

    @Override
    public Thread as(Name alias) {
        return new Thread(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(String name) {
        return new Thread(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(Name name) {
        return new Thread(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
