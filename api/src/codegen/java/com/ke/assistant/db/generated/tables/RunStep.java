/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.RunStepRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunStep extends TableImpl<RunStepRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>run_step</code>
     */
    public static final RunStep RUN_STEP = new RunStep();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunStepRecord> getRecordType() {
        return RunStepRecord.class;
    }

    /**
     * The column <code>run_step.id</code>.
     */
    public final TableField<RunStepRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.status</code>.
     */
    public final TableField<RunStepRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.type</code>.
     */
    public final TableField<RunStepRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.assistant_Id</code>.
     */
    public final TableField<RunStepRecord, String> ASSISTANT_ID = createField(DSL.name("assistant_Id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.thread_id</code>.
     */
    public final TableField<RunStepRecord, String> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.run_id</code>.
     */
    public final TableField<RunStepRecord, String> RUN_ID = createField(DSL.name("run_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.object</code>.
     */
    public final TableField<RunStepRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.metadata</code>.
     */
    public final TableField<RunStepRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.last_error</code>.
     */
    public final TableField<RunStepRecord, String> LAST_ERROR = createField(DSL.name("last_error"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.step_details</code>.
     */
    public final TableField<RunStepRecord, String> STEP_DETAILS = createField(DSL.name("step_details"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>run_step.completed_at</code>.
     */
    public final TableField<RunStepRecord, LocalDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run_step.cancelled_at</code>.
     */
    public final TableField<RunStepRecord, LocalDateTime> CANCELLED_AT = createField(DSL.name("cancelled_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run_step.expires_at</code>.
     */
    public final TableField<RunStepRecord, LocalDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run_step.failed_at</code>.
     */
    public final TableField<RunStepRecord, LocalDateTime> FAILED_AT = createField(DSL.name("failed_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run_step.message_id</code>.
     */
    public final TableField<RunStepRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.usage</code>.
     */
    public final TableField<RunStepRecord, String> USAGE = createField(DSL.name("usage"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run_step.llm_input</code>.
     */
    public final TableField<RunStepRecord, String> LLM_INPUT = createField(DSL.name("llm_input"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>run_step.reasoning_time</code>. 模型推理耗时，以秒为单位
     */
    public final TableField<RunStepRecord, Integer> REASONING_TIME = createField(DSL.name("reasoning_time"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "模型推理耗时，以秒为单位");

    /**
     * The column <code>run_step.created_at</code>.
     */
    public final TableField<RunStepRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run_step.updated_at</code>.
     */
    public final TableField<RunStepRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private RunStep(Name alias, Table<RunStepRecord> aliased) {
        this(alias, aliased, null);
    }

    private RunStep(Name alias, Table<RunStepRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>run_step</code> table reference
     */
    public RunStep(String alias) {
        this(DSL.name(alias), RUN_STEP);
    }

    /**
     * Create an aliased <code>run_step</code> table reference
     */
    public RunStep(Name alias) {
        this(alias, RUN_STEP);
    }

    /**
     * Create a <code>run_step</code> table reference
     */
    public RunStep() {
        this(DSL.name("run_step"), null);
    }

    public <O extends Record> RunStep(Table<O> child, ForeignKey<O, RunStepRecord> key) {
        super(child, key, RUN_STEP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RUN_STEP_IDX_STEP_ASSISTANT_ID, Indexes.RUN_STEP_IDX_STEP_RUN_ID, Indexes.RUN_STEP_IDX_STEP_THREAD_ID);
    }

    @Override
    public UniqueKey<RunStepRecord> getPrimaryKey() {
        return Keys.KEY_RUN_STEP_PRIMARY;
    }

    @Override
    public List<UniqueKey<RunStepRecord>> getKeys() {
        return Arrays.<UniqueKey<RunStepRecord>>asList(Keys.KEY_RUN_STEP_PRIMARY);
    }

    @Override
    public RunStep as(String alias) {
        return new RunStep(DSL.name(alias), this);
    }

    @Override
    public RunStep as(Name alias) {
        return new RunStep(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RunStep rename(String name) {
        return new RunStep(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RunStep rename(Name name) {
        return new RunStep(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, String, String, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
