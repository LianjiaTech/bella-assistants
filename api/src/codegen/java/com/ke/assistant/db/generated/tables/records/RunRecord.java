/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables.records;


import com.ke.assistant.db.generated.tables.Run;
import com.ke.assistant.db.repo.Timed;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunRecord extends UpdatableRecordImpl<RunRecord> implements Timed {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>run.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>run.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>run.object</code>.
     */
    public void setObject(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>run.object</code>.
     */
    public String getObject() {
        return (String) get(1);
    }

    /**
     * Setter for <code>run.assistant_id</code>.
     */
    public void setAssistantId(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>run.assistant_id</code>.
     */
    public String getAssistantId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>run.thread_id</code>.
     */
    public void setThreadId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>run.thread_id</code>.
     */
    public String getThreadId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>run.status</code>.
     */
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>run.status</code>.
     */
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>run.model</code>.
     */
    public void setModel(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>run.model</code>.
     */
    public String getModel() {
        return (String) get(5);
    }

    /**
     * Setter for <code>run.instructions</code>.
     */
    public void setInstructions(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>run.instructions</code>.
     */
    public String getInstructions() {
        return (String) get(6);
    }

    /**
     * Setter for <code>run.temperature</code>. temperature of the run
     */
    public void setTemperature(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>run.temperature</code>. temperature of the run
     */
    public Double getTemperature() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>run.top_p</code>. top_p of the run
     */
    public void setTopP(Double value) {
        set(8, value);
    }

    /**
     * Getter for <code>run.top_p</code>. top_p of the run
     */
    public Double getTopP() {
        return (Double) get(8);
    }

    /**
     * Setter for <code>run.max_prompt_tokens</code>. 最大输入Token长度
     */
    public void setMaxPromptTokens(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>run.max_prompt_tokens</code>. 最大输入Token长度
     */
    public Integer getMaxPromptTokens() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>run.max_completion_tokens</code>. 最大生成Token长度
     */
    public void setMaxCompletionTokens(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>run.max_completion_tokens</code>. 最大生成Token长度
     */
    public Integer getMaxCompletionTokens() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>run.truncation_strategy</code>. 上下文策略
     */
    public void setTruncationStrategy(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>run.truncation_strategy</code>. 上下文策略
     */
    public String getTruncationStrategy() {
        return (String) get(11);
    }

    /**
     * Setter for <code>run.tool_choice</code>.
     */
    public void setToolChoice(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>run.tool_choice</code>.
     */
    public String getToolChoice() {
        return (String) get(12);
    }

    /**
     * Setter for <code>run.parallel_tool_calls</code>. 并行工具调用
     */
    public void setParallelToolCalls(Byte value) {
        set(13, value);
    }

    /**
     * Getter for <code>run.parallel_tool_calls</code>. 并行工具调用
     */
    public Byte getParallelToolCalls() {
        return (Byte) get(13);
    }

    /**
     * Setter for <code>run.response_format</code>. 输出格式
     */
    public void setResponseFormat(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>run.response_format</code>. 输出格式
     */
    public String getResponseFormat() {
        return (String) get(14);
    }

    /**
     * Setter for <code>run.user</code>.
     */
    public void setUser(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>run.user</code>.
     */
    public String getUser() {
        return (String) get(15);
    }

    /**
     * Setter for <code>run.file_ids</code>.
     */
    public void setFileIds(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>run.file_ids</code>.
     */
    public String getFileIds() {
        return (String) get(16);
    }

    /**
     * Setter for <code>run.metadata</code>.
     */
    public void setMetadata(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>run.metadata</code>.
     */
    public String getMetadata() {
        return (String) get(17);
    }

    /**
     * Setter for <code>run.last_error</code>.
     */
    public void setLastError(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>run.last_error</code>.
     */
    public String getLastError() {
        return (String) get(18);
    }

    /**
     * Setter for <code>run.required_action</code>.
     */
    public void setRequiredAction(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>run.required_action</code>.
     */
    public String getRequiredAction() {
        return (String) get(19);
    }

    /**
     * Setter for <code>run.incomplete_details</code>. 未完成的原因
     */
    public void setIncompleteDetails(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>run.incomplete_details</code>. 未完成的原因
     */
    public String getIncompleteDetails() {
        return (String) get(20);
    }

    /**
     * Setter for <code>run.usage</code>.
     */
    public void setUsage(String value) {
        set(21, value);
    }

    /**
     * Getter for <code>run.usage</code>.
     */
    public String getUsage() {
        return (String) get(21);
    }

    /**
     * Setter for <code>run.started_at</code>.
     */
    public void setStartedAt(LocalDateTime value) {
        set(22, value);
    }

    /**
     * Getter for <code>run.started_at</code>.
     */
    public LocalDateTime getStartedAt() {
        return (LocalDateTime) get(22);
    }

    /**
     * Setter for <code>run.completed_at</code>.
     */
    public void setCompletedAt(LocalDateTime value) {
        set(23, value);
    }

    /**
     * Getter for <code>run.completed_at</code>.
     */
    public LocalDateTime getCompletedAt() {
        return (LocalDateTime) get(23);
    }

    /**
     * Setter for <code>run.cancelled_at</code>.
     */
    public void setCancelledAt(LocalDateTime value) {
        set(24, value);
    }

    /**
     * Getter for <code>run.cancelled_at</code>.
     */
    public LocalDateTime getCancelledAt() {
        return (LocalDateTime) get(24);
    }

    /**
     * Setter for <code>run.expires_at</code>.
     */
    public void setExpiresAt(LocalDateTime value) {
        set(25, value);
    }

    /**
     * Getter for <code>run.expires_at</code>.
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(25);
    }

    /**
     * Setter for <code>run.failed_at</code>.
     */
    public void setFailedAt(LocalDateTime value) {
        set(26, value);
    }

    /**
     * Getter for <code>run.failed_at</code>.
     */
    public LocalDateTime getFailedAt() {
        return (LocalDateTime) get(26);
    }

    /**
     * Setter for <code>run.authorization_header</code>. 模型调用身份认证信息
     */
    public void setAuthorizationHeader(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>run.authorization_header</code>. 模型调用身份认证信息
     */
    public String getAuthorizationHeader() {
        return (String) get(27);
    }

    /**
     * Setter for <code>run.task_id</code>. celery中对应的任务id
     */
    public void setTaskId(String value) {
        set(28, value);
    }

    /**
     * Getter for <code>run.task_id</code>. celery中对应的任务id
     */
    public String getTaskId() {
        return (String) get(28);
    }

    /**
     * Setter for <code>run.save_message</code>. 是否保存本轮生成 message
     */
    public void setSaveMessage(Byte value) {
        set(29, value);
    }

    /**
     * Getter for <code>run.save_message</code>. 是否保存本轮生成 message
     */
    public Byte getSaveMessage() {
        return (Byte) get(29);
    }

    /**
     * Setter for <code>run.additional_message_ids</code>. 本轮 run 的 additional message ids
     */
    public void setAdditionalMessageIds(String value) {
        set(30, value);
    }

    /**
     * Getter for <code>run.additional_message_ids</code>. 本轮 run 的 additional message ids
     */
    public String getAdditionalMessageIds() {
        return (String) get(30);
    }

    /**
     * Setter for <code>run.stream</code>.
     */
    public void setStream(String value) {
        set(31, value);
    }

    /**
     * Getter for <code>run.stream</code>.
     */
    public String getStream() {
        return (String) get(31);
    }

    /**
     * Setter for <code>run.reasoning_time</code>. 模型推理耗时，以秒为单位
     */
    public void setReasoningTime(Integer value) {
        set(32, value);
    }

    /**
     * Getter for <code>run.reasoning_time</code>. 模型推理耗时，以秒为单位
     */
    public Integer getReasoningTime() {
        return (Integer) get(32);
    }

    /**
     * Setter for <code>run.reasoning_effort</code>.
     */
    public void setReasoningEffort(String value) {
        set(33, value);
    }

    /**
     * Getter for <code>run.reasoning_effort</code>.
     */
    public String getReasoningEffort() {
        return (String) get(33);
    }

    /**
     * Setter for <code>run.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(34, value);
    }

    /**
     * Getter for <code>run.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(34);
    }

    /**
     * Setter for <code>run.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(35, value);
    }

    /**
     * Getter for <code>run.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(35);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RunRecord
     */
    public RunRecord() {
        super(Run.RUN);
    }

    /**
     * Create a detached, initialised RunRecord
     */
    public RunRecord(String id, String object, String assistantId, String threadId, String status, String model, String instructions, Double temperature, Double topP, Integer maxPromptTokens, Integer maxCompletionTokens, String truncationStrategy, String toolChoice, Byte parallelToolCalls, String responseFormat, String user, String fileIds, String metadata, String lastError, String requiredAction, String incompleteDetails, String usage, LocalDateTime startedAt, LocalDateTime completedAt, LocalDateTime cancelledAt, LocalDateTime expiresAt, LocalDateTime failedAt, String authorizationHeader, String taskId, Byte saveMessage, String additionalMessageIds, String stream, Integer reasoningTime, String reasoningEffort, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(Run.RUN);

        setId(id);
        setObject(object);
        setAssistantId(assistantId);
        setThreadId(threadId);
        setStatus(status);
        setModel(model);
        setInstructions(instructions);
        setTemperature(temperature);
        setTopP(topP);
        setMaxPromptTokens(maxPromptTokens);
        setMaxCompletionTokens(maxCompletionTokens);
        setTruncationStrategy(truncationStrategy);
        setToolChoice(toolChoice);
        setParallelToolCalls(parallelToolCalls);
        setResponseFormat(responseFormat);
        setUser(user);
        setFileIds(fileIds);
        setMetadata(metadata);
        setLastError(lastError);
        setRequiredAction(requiredAction);
        setIncompleteDetails(incompleteDetails);
        setUsage(usage);
        setStartedAt(startedAt);
        setCompletedAt(completedAt);
        setCancelledAt(cancelledAt);
        setExpiresAt(expiresAt);
        setFailedAt(failedAt);
        setAuthorizationHeader(authorizationHeader);
        setTaskId(taskId);
        setSaveMessage(saveMessage);
        setAdditionalMessageIds(additionalMessageIds);
        setStream(stream);
        setReasoningTime(reasoningTime);
        setReasoningEffort(reasoningEffort);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
    }
}
