/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.AssistantToolRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssistantTool extends TableImpl<AssistantToolRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>assistant_tool</code>
     */
    public static final AssistantTool ASSISTANT_TOOL = new AssistantTool();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssistantToolRecord> getRecordType() {
        return AssistantToolRecord.class;
    }

    /**
     * The column <code>assistant_tool.id</code>.
     */
    public final TableField<AssistantToolRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>assistant_tool.assistant_id</code>. tool所关联的对象（assistant_id or run_id)
     */
    public final TableField<AssistantToolRecord, String> ASSISTANT_ID = createField(DSL.name("assistant_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "tool所关联的对象（assistant_id or run_id)");

    /**
     * The column <code>assistant_tool.tool</code>.
     */
    public final TableField<AssistantToolRecord, String> TOOL = createField(DSL.name("tool"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>assistant_tool.created_at</code>.
     */
    public final TableField<AssistantToolRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>assistant_tool.updated_at</code>.
     */
    public final TableField<AssistantToolRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private AssistantTool(Name alias, Table<AssistantToolRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssistantTool(Name alias, Table<AssistantToolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>assistant_tool</code> table reference
     */
    public AssistantTool(String alias) {
        this(DSL.name(alias), ASSISTANT_TOOL);
    }

    /**
     * Create an aliased <code>assistant_tool</code> table reference
     */
    public AssistantTool(Name alias) {
        this(alias, ASSISTANT_TOOL);
    }

    /**
     * Create a <code>assistant_tool</code> table reference
     */
    public AssistantTool() {
        this(DSL.name("assistant_tool"), null);
    }

    public <O extends Record> AssistantTool(Table<O> child, ForeignKey<O, AssistantToolRecord> key) {
        super(child, key, ASSISTANT_TOOL);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSISTANT_TOOL_INDEX_ASSISTANT_ID);
    }

    @Override
    public Identity<AssistantToolRecord, Integer> getIdentity() {
        return (Identity<AssistantToolRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AssistantToolRecord> getPrimaryKey() {
        return Keys.KEY_ASSISTANT_TOOL_PRIMARY;
    }

    @Override
    public List<UniqueKey<AssistantToolRecord>> getKeys() {
        return Arrays.<UniqueKey<AssistantToolRecord>>asList(Keys.KEY_ASSISTANT_TOOL_PRIMARY);
    }

    @Override
    public AssistantTool as(String alias) {
        return new AssistantTool(DSL.name(alias), this);
    }

    @Override
    public AssistantTool as(Name alias) {
        return new AssistantTool(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssistantTool rename(String name) {
        return new AssistantTool(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssistantTool rename(Name name) {
        return new AssistantTool(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
