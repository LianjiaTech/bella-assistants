/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.IdSequenceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ID序列生成表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdSequence extends TableImpl<IdSequenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>id_sequence</code>
     */
    public static final IdSequence ID_SEQUENCE = new IdSequence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdSequenceRecord> getRecordType() {
        return IdSequenceRecord.class;
    }

    /**
     * The column <code>id_sequence.id</code>.
     */
    public final TableField<IdSequenceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>id_sequence.prefix</code>. ID前缀
     */
    public final TableField<IdSequenceRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "ID前缀");

    /**
     * The column <code>id_sequence.current_value</code>. 当前值
     */
    public final TableField<IdSequenceRecord, Long> CURRENT_VALUE = createField(DSL.name("current_value"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "当前值");

    /**
     * The column <code>id_sequence.created_at</code>.
     */
    public final TableField<IdSequenceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>id_sequence.updated_at</code>.
     */
    public final TableField<IdSequenceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private IdSequence(Name alias, Table<IdSequenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdSequence(Name alias, Table<IdSequenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ID序列生成表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>id_sequence</code> table reference
     */
    public IdSequence(String alias) {
        this(DSL.name(alias), ID_SEQUENCE);
    }

    /**
     * Create an aliased <code>id_sequence</code> table reference
     */
    public IdSequence(Name alias) {
        this(alias, ID_SEQUENCE);
    }

    /**
     * Create a <code>id_sequence</code> table reference
     */
    public IdSequence() {
        this(DSL.name("id_sequence"), null);
    }

    public <O extends Record> IdSequence(Table<O> child, ForeignKey<O, IdSequenceRecord> key) {
        super(child, key, ID_SEQUENCE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<IdSequenceRecord, Integer> getIdentity() {
        return (Identity<IdSequenceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<IdSequenceRecord> getPrimaryKey() {
        return Keys.KEY_ID_SEQUENCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<IdSequenceRecord>> getKeys() {
        return Arrays.<UniqueKey<IdSequenceRecord>>asList(Keys.KEY_ID_SEQUENCE_PRIMARY, Keys.KEY_ID_SEQUENCE_UNIQUE_PREFIX);
    }

    @Override
    public IdSequence as(String alias) {
        return new IdSequence(DSL.name(alias), this);
    }

    @Override
    public IdSequence as(Name alias) {
        return new IdSequence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdSequence rename(String name) {
        return new IdSequence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdSequence rename(Name name) {
        return new IdSequence(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
