/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables.pojos;


import com.ke.assistant.db.repo.Timed;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunDb implements Timed, Serializable {

    private static final long serialVersionUID = 1L;

    private String        id;
    private String        object;
    private String        assistantId;
    private String        threadId;
    private String        status;
    private String        model;
    private String        instructions;
    private Double        temperature;
    private Double        topP;
    private Integer       maxPromptTokens;
    private Integer       maxCompletionTokens;
    private String        truncationStrategy;
    private String        toolChoice;
    private Byte          parallelToolCalls;
    private String        responseFormat;
    private String        user;
    private String        fileIds;
    private String        metadata;
    private String        lastError;
    private String        requiredAction;
    private String        incompleteDetails;
    private String        usage;
    private LocalDateTime startedAt;
    private LocalDateTime completedAt;
    private LocalDateTime cancelledAt;
    private LocalDateTime expiresAt;
    private LocalDateTime failedAt;
    private String        authorizationHeader;
    private String        taskId;
    private Byte          saveMessage;
    private String        additionalMessageIds;
    private String        stream;
    private Integer       reasoningTime;
    private String        reasoningEffort;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    public RunDb() {}

    public RunDb(RunDb value) {
        this.id = value.id;
        this.object = value.object;
        this.assistantId = value.assistantId;
        this.threadId = value.threadId;
        this.status = value.status;
        this.model = value.model;
        this.instructions = value.instructions;
        this.temperature = value.temperature;
        this.topP = value.topP;
        this.maxPromptTokens = value.maxPromptTokens;
        this.maxCompletionTokens = value.maxCompletionTokens;
        this.truncationStrategy = value.truncationStrategy;
        this.toolChoice = value.toolChoice;
        this.parallelToolCalls = value.parallelToolCalls;
        this.responseFormat = value.responseFormat;
        this.user = value.user;
        this.fileIds = value.fileIds;
        this.metadata = value.metadata;
        this.lastError = value.lastError;
        this.requiredAction = value.requiredAction;
        this.incompleteDetails = value.incompleteDetails;
        this.usage = value.usage;
        this.startedAt = value.startedAt;
        this.completedAt = value.completedAt;
        this.cancelledAt = value.cancelledAt;
        this.expiresAt = value.expiresAt;
        this.failedAt = value.failedAt;
        this.authorizationHeader = value.authorizationHeader;
        this.taskId = value.taskId;
        this.saveMessage = value.saveMessage;
        this.additionalMessageIds = value.additionalMessageIds;
        this.stream = value.stream;
        this.reasoningTime = value.reasoningTime;
        this.reasoningEffort = value.reasoningEffort;
        this.createdAt = value.createdAt;
        this.updatedAt = value.updatedAt;
    }

    public RunDb(
        String        id,
        String        object,
        String        assistantId,
        String        threadId,
        String        status,
        String        model,
        String        instructions,
        Double        temperature,
        Double        topP,
        Integer       maxPromptTokens,
        Integer       maxCompletionTokens,
        String        truncationStrategy,
        String        toolChoice,
        Byte          parallelToolCalls,
        String        responseFormat,
        String        user,
        String        fileIds,
        String        metadata,
        String        lastError,
        String        requiredAction,
        String        incompleteDetails,
        String        usage,
        LocalDateTime startedAt,
        LocalDateTime completedAt,
        LocalDateTime cancelledAt,
        LocalDateTime expiresAt,
        LocalDateTime failedAt,
        String        authorizationHeader,
        String        taskId,
        Byte          saveMessage,
        String        additionalMessageIds,
        String        stream,
        Integer       reasoningTime,
        String        reasoningEffort,
        LocalDateTime createdAt,
        LocalDateTime updatedAt
    ) {
        this.id = id;
        this.object = object;
        this.assistantId = assistantId;
        this.threadId = threadId;
        this.status = status;
        this.model = model;
        this.instructions = instructions;
        this.temperature = temperature;
        this.topP = topP;
        this.maxPromptTokens = maxPromptTokens;
        this.maxCompletionTokens = maxCompletionTokens;
        this.truncationStrategy = truncationStrategy;
        this.toolChoice = toolChoice;
        this.parallelToolCalls = parallelToolCalls;
        this.responseFormat = responseFormat;
        this.user = user;
        this.fileIds = fileIds;
        this.metadata = metadata;
        this.lastError = lastError;
        this.requiredAction = requiredAction;
        this.incompleteDetails = incompleteDetails;
        this.usage = usage;
        this.startedAt = startedAt;
        this.completedAt = completedAt;
        this.cancelledAt = cancelledAt;
        this.expiresAt = expiresAt;
        this.failedAt = failedAt;
        this.authorizationHeader = authorizationHeader;
        this.taskId = taskId;
        this.saveMessage = saveMessage;
        this.additionalMessageIds = additionalMessageIds;
        this.stream = stream;
        this.reasoningTime = reasoningTime;
        this.reasoningEffort = reasoningEffort;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for <code>run.id</code>.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Setter for <code>run.id</code>.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for <code>run.object</code>.
     */
    public String getObject() {
        return this.object;
    }

    /**
     * Setter for <code>run.object</code>.
     */
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for <code>run.assistant_id</code>.
     */
    public String getAssistantId() {
        return this.assistantId;
    }

    /**
     * Setter for <code>run.assistant_id</code>.
     */
    public void setAssistantId(String assistantId) {
        this.assistantId = assistantId;
    }

    /**
     * Getter for <code>run.thread_id</code>.
     */
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Setter for <code>run.thread_id</code>.
     */
    public void setThreadId(String threadId) {
        this.threadId = threadId;
    }

    /**
     * Getter for <code>run.status</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>run.status</code>.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for <code>run.model</code>.
     */
    public String getModel() {
        return this.model;
    }

    /**
     * Setter for <code>run.model</code>.
     */
    public void setModel(String model) {
        this.model = model;
    }

    /**
     * Getter for <code>run.instructions</code>.
     */
    public String getInstructions() {
        return this.instructions;
    }

    /**
     * Setter for <code>run.instructions</code>.
     */
    public void setInstructions(String instructions) {
        this.instructions = instructions;
    }

    /**
     * Getter for <code>run.temperature</code>. temperature of the run
     */
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Setter for <code>run.temperature</code>. temperature of the run
     */
    public void setTemperature(Double temperature) {
        this.temperature = temperature;
    }

    /**
     * Getter for <code>run.top_p</code>. top_p of the run
     */
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Setter for <code>run.top_p</code>. top_p of the run
     */
    public void setTopP(Double topP) {
        this.topP = topP;
    }

    /**
     * Getter for <code>run.max_prompt_tokens</code>. 最大输入Token长度
     */
    public Integer getMaxPromptTokens() {
        return this.maxPromptTokens;
    }

    /**
     * Setter for <code>run.max_prompt_tokens</code>. 最大输入Token长度
     */
    public void setMaxPromptTokens(Integer maxPromptTokens) {
        this.maxPromptTokens = maxPromptTokens;
    }

    /**
     * Getter for <code>run.max_completion_tokens</code>. 最大生成Token长度
     */
    public Integer getMaxCompletionTokens() {
        return this.maxCompletionTokens;
    }

    /**
     * Setter for <code>run.max_completion_tokens</code>. 最大生成Token长度
     */
    public void setMaxCompletionTokens(Integer maxCompletionTokens) {
        this.maxCompletionTokens = maxCompletionTokens;
    }

    /**
     * Getter for <code>run.truncation_strategy</code>. 上下文策略
     */
    public String getTruncationStrategy() {
        return this.truncationStrategy;
    }

    /**
     * Setter for <code>run.truncation_strategy</code>. 上下文策略
     */
    public void setTruncationStrategy(String truncationStrategy) {
        this.truncationStrategy = truncationStrategy;
    }

    /**
     * Getter for <code>run.tool_choice</code>.
     */
    public String getToolChoice() {
        return this.toolChoice;
    }

    /**
     * Setter for <code>run.tool_choice</code>.
     */
    public void setToolChoice(String toolChoice) {
        this.toolChoice = toolChoice;
    }

    /**
     * Getter for <code>run.parallel_tool_calls</code>. 并行工具调用
     */
    public Byte getParallelToolCalls() {
        return this.parallelToolCalls;
    }

    /**
     * Setter for <code>run.parallel_tool_calls</code>. 并行工具调用
     */
    public void setParallelToolCalls(Byte parallelToolCalls) {
        this.parallelToolCalls = parallelToolCalls;
    }

    /**
     * Getter for <code>run.response_format</code>. 输出格式
     */
    public String getResponseFormat() {
        return this.responseFormat;
    }

    /**
     * Setter for <code>run.response_format</code>. 输出格式
     */
    public void setResponseFormat(String responseFormat) {
        this.responseFormat = responseFormat;
    }

    /**
     * Getter for <code>run.user</code>.
     */
    public String getUser() {
        return this.user;
    }

    /**
     * Setter for <code>run.user</code>.
     */
    public void setUser(String user) {
        this.user = user;
    }

    /**
     * Getter for <code>run.file_ids</code>.
     */
    public String getFileIds() {
        return this.fileIds;
    }

    /**
     * Setter for <code>run.file_ids</code>.
     */
    public void setFileIds(String fileIds) {
        this.fileIds = fileIds;
    }

    /**
     * Getter for <code>run.metadata</code>.
     */
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>run.metadata</code>.
     */
    public void setMetadata(String metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for <code>run.last_error</code>.
     */
    public String getLastError() {
        return this.lastError;
    }

    /**
     * Setter for <code>run.last_error</code>.
     */
    public void setLastError(String lastError) {
        this.lastError = lastError;
    }

    /**
     * Getter for <code>run.required_action</code>.
     */
    public String getRequiredAction() {
        return this.requiredAction;
    }

    /**
     * Setter for <code>run.required_action</code>.
     */
    public void setRequiredAction(String requiredAction) {
        this.requiredAction = requiredAction;
    }

    /**
     * Getter for <code>run.incomplete_details</code>. 未完成的原因
     */
    public String getIncompleteDetails() {
        return this.incompleteDetails;
    }

    /**
     * Setter for <code>run.incomplete_details</code>. 未完成的原因
     */
    public void setIncompleteDetails(String incompleteDetails) {
        this.incompleteDetails = incompleteDetails;
    }

    /**
     * Getter for <code>run.usage</code>.
     */
    public String getUsage() {
        return this.usage;
    }

    /**
     * Setter for <code>run.usage</code>.
     */
    public void setUsage(String usage) {
        this.usage = usage;
    }

    /**
     * Getter for <code>run.started_at</code>.
     */
    public LocalDateTime getStartedAt() {
        return this.startedAt;
    }

    /**
     * Setter for <code>run.started_at</code>.
     */
    public void setStartedAt(LocalDateTime startedAt) {
        this.startedAt = startedAt;
    }

    /**
     * Getter for <code>run.completed_at</code>.
     */
    public LocalDateTime getCompletedAt() {
        return this.completedAt;
    }

    /**
     * Setter for <code>run.completed_at</code>.
     */
    public void setCompletedAt(LocalDateTime completedAt) {
        this.completedAt = completedAt;
    }

    /**
     * Getter for <code>run.cancelled_at</code>.
     */
    public LocalDateTime getCancelledAt() {
        return this.cancelledAt;
    }

    /**
     * Setter for <code>run.cancelled_at</code>.
     */
    public void setCancelledAt(LocalDateTime cancelledAt) {
        this.cancelledAt = cancelledAt;
    }

    /**
     * Getter for <code>run.expires_at</code>.
     */
    public LocalDateTime getExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Setter for <code>run.expires_at</code>.
     */
    public void setExpiresAt(LocalDateTime expiresAt) {
        this.expiresAt = expiresAt;
    }

    /**
     * Getter for <code>run.failed_at</code>.
     */
    public LocalDateTime getFailedAt() {
        return this.failedAt;
    }

    /**
     * Setter for <code>run.failed_at</code>.
     */
    public void setFailedAt(LocalDateTime failedAt) {
        this.failedAt = failedAt;
    }

    /**
     * Getter for <code>run.authorization_header</code>. 模型调用身份认证信息
     */
    public String getAuthorizationHeader() {
        return this.authorizationHeader;
    }

    /**
     * Setter for <code>run.authorization_header</code>. 模型调用身份认证信息
     */
    public void setAuthorizationHeader(String authorizationHeader) {
        this.authorizationHeader = authorizationHeader;
    }

    /**
     * Getter for <code>run.task_id</code>. celery中对应的任务id
     */
    public String getTaskId() {
        return this.taskId;
    }

    /**
     * Setter for <code>run.task_id</code>. celery中对应的任务id
     */
    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }

    /**
     * Getter for <code>run.save_message</code>. 是否保存本轮生成 message
     */
    public Byte getSaveMessage() {
        return this.saveMessage;
    }

    /**
     * Setter for <code>run.save_message</code>. 是否保存本轮生成 message
     */
    public void setSaveMessage(Byte saveMessage) {
        this.saveMessage = saveMessage;
    }

    /**
     * Getter for <code>run.additional_message_ids</code>. 本轮 run 的 additional message ids
     */
    public String getAdditionalMessageIds() {
        return this.additionalMessageIds;
    }

    /**
     * Setter for <code>run.additional_message_ids</code>. 本轮 run 的 additional message ids
     */
    public void setAdditionalMessageIds(String additionalMessageIds) {
        this.additionalMessageIds = additionalMessageIds;
    }

    /**
     * Getter for <code>run.stream</code>.
     */
    public String getStream() {
        return this.stream;
    }

    /**
     * Setter for <code>run.stream</code>.
     */
    public void setStream(String stream) {
        this.stream = stream;
    }

    /**
     * Getter for <code>run.reasoning_time</code>. 模型推理耗时，以秒为单位
     */
    public Integer getReasoningTime() {
        return this.reasoningTime;
    }

    /**
     * Setter for <code>run.reasoning_time</code>. 模型推理耗时，以秒为单位
     */
    public void setReasoningTime(Integer reasoningTime) {
        this.reasoningTime = reasoningTime;
    }

    /**
     * Getter for <code>run.reasoning_effort</code>.
     */
    public String getReasoningEffort() {
        return this.reasoningEffort;
    }

    /**
     * Setter for <code>run.reasoning_effort</code>.
     */
    public void setReasoningEffort(String reasoningEffort) {
        this.reasoningEffort = reasoningEffort;
    }

    /**
     * Getter for <code>run.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>run.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>run.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>run.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RunDb (");

        sb.append(id);
        sb.append(", ").append(object);
        sb.append(", ").append(assistantId);
        sb.append(", ").append(threadId);
        sb.append(", ").append(status);
        sb.append(", ").append(model);
        sb.append(", ").append(instructions);
        sb.append(", ").append(temperature);
        sb.append(", ").append(topP);
        sb.append(", ").append(maxPromptTokens);
        sb.append(", ").append(maxCompletionTokens);
        sb.append(", ").append(truncationStrategy);
        sb.append(", ").append(toolChoice);
        sb.append(", ").append(parallelToolCalls);
        sb.append(", ").append(responseFormat);
        sb.append(", ").append(user);
        sb.append(", ").append(fileIds);
        sb.append(", ").append(metadata);
        sb.append(", ").append(lastError);
        sb.append(", ").append(requiredAction);
        sb.append(", ").append(incompleteDetails);
        sb.append(", ").append(usage);
        sb.append(", ").append(startedAt);
        sb.append(", ").append(completedAt);
        sb.append(", ").append(cancelledAt);
        sb.append(", ").append(expiresAt);
        sb.append(", ").append(failedAt);
        sb.append(", ").append(authorizationHeader);
        sb.append(", ").append(taskId);
        sb.append(", ").append(saveMessage);
        sb.append(", ").append(additionalMessageIds);
        sb.append(", ").append(stream);
        sb.append(", ").append(reasoningTime);
        sb.append(", ").append(reasoningEffort);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }
}
