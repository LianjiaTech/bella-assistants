/*
 * This file is generated by jOOQ.
 */
package com.ke.assistant.db.generated.tables;


import com.ke.assistant.db.generated.DefaultSchema;
import com.ke.assistant.db.generated.Indexes;
import com.ke.assistant.db.generated.Keys;
import com.ke.assistant.db.generated.tables.records.RunRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Run extends TableImpl<RunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>run</code>
     */
    public static final Run RUN = new Run();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunRecord> getRecordType() {
        return RunRecord.class;
    }

    /**
     * The column <code>run.id</code>.
     */
    public final TableField<RunRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.object</code>.
     */
    public final TableField<RunRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.assistant_id</code>.
     */
    public final TableField<RunRecord, String> ASSISTANT_ID = createField(DSL.name("assistant_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.thread_id</code>.
     */
    public final TableField<RunRecord, String> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.status</code>.
     */
    public final TableField<RunRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.model</code>.
     */
    public final TableField<RunRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.instructions</code>.
     */
    public final TableField<RunRecord, String> INSTRUCTIONS = createField(DSL.name("instructions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>run.temperature</code>. temperature of the run
     */
    public final TableField<RunRecord, Double> TEMPERATURE = createField(DSL.name("temperature"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.inline("0.01", SQLDataType.FLOAT)), this, "temperature of the run");

    /**
     * The column <code>run.top_p</code>. top_p of the run
     */
    public final TableField<RunRecord, Double> TOP_P = createField(DSL.name("top_p"), SQLDataType.FLOAT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.FLOAT)), this, "top_p of the run");

    /**
     * The column <code>run.max_prompt_tokens</code>. 最大输入Token长度
     */
    public final TableField<RunRecord, Integer> MAX_PROMPT_TOKENS = createField(DSL.name("max_prompt_tokens"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "最大输入Token长度");

    /**
     * The column <code>run.max_completion_tokens</code>. 最大生成Token长度
     */
    public final TableField<RunRecord, Integer> MAX_COMPLETION_TOKENS = createField(DSL.name("max_completion_tokens"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "最大生成Token长度");

    /**
     * The column <code>run.truncation_strategy</code>. 上下文策略
     */
    public final TableField<RunRecord, String> TRUNCATION_STRATEGY = createField(DSL.name("truncation_strategy"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "上下文策略");

    /**
     * The column <code>run.tool_choice</code>.
     */
    public final TableField<RunRecord, String> TOOL_CHOICE = createField(DSL.name("tool_choice"), SQLDataType.VARCHAR(3096).nullable(false).defaultValue(DSL.inline("auto", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.parallel_tool_calls</code>. 并行工具调用
     */
    public final TableField<RunRecord, Byte> PARALLEL_TOOL_CALLS = createField(DSL.name("parallel_tool_calls"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "并行工具调用");

    /**
     * The column <code>run.response_format</code>. 输出格式
     */
    public final TableField<RunRecord, String> RESPONSE_FORMAT = createField(DSL.name("response_format"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("auto", SQLDataType.VARCHAR)), this, "输出格式");

    /**
     * The column <code>run.user</code>.
     */
    public final TableField<RunRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>run.file_ids</code>.
     */
    public final TableField<RunRecord, String> FILE_IDS = createField(DSL.name("file_ids"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.metadata</code>.
     */
    public final TableField<RunRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.last_error</code>.
     */
    public final TableField<RunRecord, String> LAST_ERROR = createField(DSL.name("last_error"), SQLDataType.VARCHAR(4096).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.required_action</code>.
     */
    public final TableField<RunRecord, String> REQUIRED_ACTION = createField(DSL.name("required_action"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>run.incomplete_details</code>. 未完成的原因
     */
    public final TableField<RunRecord, String> INCOMPLETE_DETAILS = createField(DSL.name("incomplete_details"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "未完成的原因");

    /**
     * The column <code>run.usage</code>.
     */
    public final TableField<RunRecord, String> USAGE = createField(DSL.name("usage"), SQLDataType.VARCHAR(256).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.started_at</code>.
     */
    public final TableField<RunRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.completed_at</code>.
     */
    public final TableField<RunRecord, LocalDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.cancelled_at</code>.
     */
    public final TableField<RunRecord, LocalDateTime> CANCELLED_AT = createField(DSL.name("cancelled_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.expires_at</code>.
     */
    public final TableField<RunRecord, LocalDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 09:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.failed_at</code>.
     */
    public final TableField<RunRecord, LocalDateTime> FAILED_AT = createField(DSL.name("failed_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("1970-01-01 08:00:00", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.authorization_header</code>. 模型调用身份认证信息
     */
    public final TableField<RunRecord, String> AUTHORIZATION_HEADER = createField(DSL.name("authorization_header"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "模型调用身份认证信息");

    /**
     * The column <code>run.task_id</code>. celery中对应的任务id
     */
    public final TableField<RunRecord, String> TASK_ID = createField(DSL.name("task_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "celery中对应的任务id");

    /**
     * The column <code>run.save_message</code>. 是否保存本轮生成 message
     */
    public final TableField<RunRecord, Byte> SAVE_MESSAGE = createField(DSL.name("save_message"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "是否保存本轮生成 message");

    /**
     * The column <code>run.additional_message_ids</code>. 本轮 run 的 additional message ids
     */
    public final TableField<RunRecord, String> ADDITIONAL_MESSAGE_IDS = createField(DSL.name("additional_message_ids"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "本轮 run 的 additional message ids");

    /**
     * The column <code>run.stream</code>.
     */
    public final TableField<RunRecord, String> STREAM = createField(DSL.name("stream"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("1", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.reasoning_time</code>. 模型推理耗时，以秒为单位
     */
    public final TableField<RunRecord, Integer> REASONING_TIME = createField(DSL.name("reasoning_time"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "模型推理耗时，以秒为单位");

    /**
     * The column <code>run.reasoning_effort</code>.
     */
    public final TableField<RunRecord, String> REASONING_EFFORT = createField(DSL.name("reasoning_effort"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("\"\"", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>run.created_at</code>.
     */
    public final TableField<RunRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.updated_at</code>.
     */
    public final TableField<RunRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Run(Name alias, Table<RunRecord> aliased) {
        this(alias, aliased, null);
    }

    private Run(Name alias, Table<RunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>run</code> table reference
     */
    public Run(String alias) {
        this(DSL.name(alias), RUN);
    }

    /**
     * Create an aliased <code>run</code> table reference
     */
    public Run(Name alias) {
        this(alias, RUN);
    }

    /**
     * Create a <code>run</code> table reference
     */
    public Run() {
        this(DSL.name("run"), null);
    }

    public <O extends Record> Run(Table<O> child, ForeignKey<O, RunRecord> key) {
        super(child, key, RUN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RUN_IDX_CREATED_AT, Indexes.RUN_IDX_RUN_ASSISTANT_ID, Indexes.RUN_IDX_RUN_THREAD_ID, Indexes.RUN_IDX_STATUS);
    }

    @Override
    public UniqueKey<RunRecord> getPrimaryKey() {
        return Keys.KEY_RUN_PRIMARY;
    }

    @Override
    public List<UniqueKey<RunRecord>> getKeys() {
        return Arrays.<UniqueKey<RunRecord>>asList(Keys.KEY_RUN_PRIMARY);
    }

    @Override
    public Run as(String alias) {
        return new Run(DSL.name(alias), this);
    }

    @Override
    public Run as(Name alias) {
        return new Run(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Run rename(String name) {
        return new Run(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Run rename(Name name) {
        return new Run(name, null);
    }
}
